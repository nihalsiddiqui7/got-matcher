# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13UqU1hFwEZhixIvL8iIsXIqz-vUMSC3j
"""

import streamlit as st
import pandas as pd
import numpy as np
import math
from pathlib import Path

# --- Load Data ---
@st.cache_data
def load_data():
    return pd.read_csv("data/top_25_characters.csv")

df = load_data()

# --- Helper: Find Closest Match ---
def find_closest(char):
    if char not in df['character'].values:
        return None
    x0, y0 = df[df['character'] == char][['x', 'y']].values[0]
    df['distance'] = df.apply(
        lambda row: math.sqrt((row['x'] - x0)**2 + (row['y'] - y0)**2)
        if row['character'] != char else np.inf, axis=1
    )
    return df.loc[df['distance'].idxmin()]

# --- Helper: Get Image Path ---
def get_image_path(character_name):
    filename = character_name.lower().replace(' ', '_') + '.jpg'
    return Path('images') / filename

# --- UI ---
st.set_page_config(page_title="GoT Character Matcher", layout="centered")
st.title("üßù‚Äç‚ôÇÔ∏è Game of Thrones Character Matcher")
st.write("Find the most similar character based on their dialogue style!")

# --- Character Input ---
character = st.selectbox("Choose a character", sorted(df['character'].unique()))

if st.button("Find Match"):
    closest = find_closest(character)

    if closest is not None:
        col1, col2 = st.columns(2)

        with col1:
            st.subheader("üéØ You chose")
            st.markdown(f"**{character}**")
            image_path = get_image_path(character)
            if image_path.exists():
                st.image(image_path, use_container_width=True)
            else:
                st.info("No image available.")

        with col2:
            st.subheader("üí° Closest match")
            st.markdown(f"**{closest.character}**")
            st.markdown(f"üó£ Has spoken **{int(closest.n_words):,}** words.")
            match_image = get_image_path(closest.character)
            if match_image.exists():
                st.image(match_image, use_container_width=True)
            else:
                st.info("No image available.")